#!/usr/bin/env bash
# 搜索代码用void test_开头的函数,并执行

#IFS='\n\t\s'
set -euo pipefail
# set -o xtrace

declare -r script_path="${BASH_SOURCE[0]}"
#declare -r script_dir="${script_path%/*}"
declare -r script_file="${script_path##*/}"

info() { printf "\\e[1m\\e[38;5;14m✔ %s\\e[0m\\n" "$@"; }
warn() { printf "\\e[1m\\e[38;5;148m➜️ %s\\e[0m\\n" "$@"; }
error(){ printf "\\e[1m\\e[38;5;196m✖ %s\\e[0m\\n" "$@"; }

die() {
  local last_error=$?
  if [[ $1 =~ ^[0-9]+$ ]]; then
  	last_error=$1
  	shift
  fi
  error "${script_file}:${BASH_LINENO[0]} ${FUNCNAME[1]}(${last_error})> $*" >&2
  exit "$last_error"
}

#declare -i # for integer
#declare -a # for array
#declare -r # readonly

if [[ $# -lt 1 ]]; then
	die 1 "Usage:${script_file} source-file [,source-file, ...]"
fi

command_exists () {
  type "$1" >/dev/null 2>&1
}

die(){
	echo "$*"
	exit 1
}

CUSTOM_FLAGS=""
files=""
while [[ $# -gt 0 ]];do
  key="$1"
  if [[ $key =~ -.* ]]; then
    CUSTOM_FLAGS="$CUSTOM_FLAGS $key"
  else
    files="$files $key"
  fi
  shift
done

echo "$files"
#files="$*" #files="nuid_checker.cpp nuid_inspect.cpp"

# 收集test_开头的函数
# void test_compareVersion();

#shellcheck disable=2068,2086
functions="$(grep -o  -E 'test_[a-zA-Z0-9]+\(\)' $files|sed -e 's/.*://g')"

# 生成测试工程
UINT_TEST="uint_test"
UNIT_TEST_CPP="./${UINT_TEST}.cpp"
UINT_TEST_EXE="./${UINT_TEST}"
echo "#include <stdlib.h>" > "$UNIT_TEST_CPP"
echo "" >> "$UNIT_TEST_CPP"
for f in $functions; do
	echo "extern void $f;" >> "$UNIT_TEST_CPP"
done
echo "" >> "$UNIT_TEST_CPP"

echo "int main(int argc, char **argv) {" >> "$UNIT_TEST_CPP"
for f in $functions; do
	echo "   $f;" >> "$UNIT_TEST_CPP"
done
echo "   return 0;" >> "$UNIT_TEST_CPP"
echo "}" >> "$UNIT_TEST_CPP"


# 编译工程进行测试
CPPFlags="-fasynchronous-unwind-tables -fstack-protector -O2 -Wall -Werror=format-security -Werror=implicit-function-declaration -fexceptions "

EXE_CPPFlags="$CPPFlags -fpie"
SO_CPPFlags="$CPPFlags -fPIC -shared"

# shellcheck disable=2068,2086
g++ $SO_CPPFlags -DUNIT_TEST $CUSTOM_FLAGS $files -o lib"${UINT_TEST}".so || die "build so failed"

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}:.
# shellcheck disable=2068,2086
g++ $EXE_CPPFlags -DUNIT_TEST $CUSTOM_FLAGS $UNIT_TEST_CPP -L. -l${UINT_TEST} -o "${UINT_TEST_EXE}" || die "build exe failed"

./${UINT_TEST_EXE}
rm -f ./${UINT_TEST}
rm -f ./lib${UINT_TEST}.so
rm -f "$UNIT_TEST_CPP"